

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Fri Nov 23 21:39:21 2018

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	pa_nodes0,global,class=CODE,delta=1
    24  0000                     
    25                           ; Version 1.41 (B)
    26                           ; Generated 21/02/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F25K80 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     stkptr	equ	0xFFC
    60                           tblptru	equ	0xFF8
    61                           tblptrh	equ	0xFF7
    62                           tblptrl	equ	0xFF6
    63                           tablat	equ	0xFF5
    64                           intcon	equ	0xFF2
    65                           wreg	equ	0xFE8
    66                           indf1	equ	0xFE7
    67                           plusw1	equ	0xFE3
    68                           fsr1h	equ	0xFE2
    69                           fsr1l	equ	0xFE1
    70                           indf2	equ	0xFDF
    71                           plusw2	equ	0xFDB
    72                           fsr2h	equ	0xFDA
    73                           fsr2l	equ	0xFD9
    74                           status	equ	0xFD8
    75                           
    76                           	psect	idataCOMRAM
    77  000816                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for main@F14957
    81  000816  66                 	db	102
    82  000817  66                 	db	102
    83  000818  66                 	db	102
    84  000819  66                 	db	102
    85  00081A  66                 	db	102
    86  00081B  66                 	db	102
    87  00081C  66                 	db	102
    88  00081D  66                 	db	102
    89                           
    90                           ;initializer for main@F14948
    91  00081E  41                 	db	65
    92  00081F  63                 	db	99
    93  000820  6B                 	db	107
    94  000821  2D                 	db	45
    95  000822  2D                 	db	45
    96  000823  2D                 	db	45
    97  000824  AA                 	db	170
    98                           
    99                           ;initializer for main@F14946
   100  000825  47                 	db	71
   101  000826  6F                 	db	111
   102  000827  74                 	db	116
   103  000828  6F                 	db	111
   104  000829  41                 	db	65
   105  00082A  70                 	db	112
   106  00082B  70                 	db	112
   107                           
   108                           ;initializer for main@cEndFlg
   109  00082C  FFFF               	dw	65535
   110  00082E  000F               	dw	15
   111                           
   112                           ;initializer for _pTXB0D
   113  000830  26                 	db	38
   114  000831  0F                 	db	15
   115                           
   116                           ;initializer for _CAN_rx_buf
   117  000832  01                 	db	1
   118  000833  02                 	db	2
   119  000834  03                 	db	3
   120  000835  04                 	db	4
   121  000836  05                 	db	5
   122  000837  06                 	db	6
   123  000838  07                 	db	7
   124  000839  08                 	db	8
   125                           stkptr	equ	0xFFC
   126                           tblptru	equ	0xFF8
   127                           tblptrh	equ	0xFF7
   128                           tblptrl	equ	0xFF6
   129                           tablat	equ	0xFF5
   130                           intcon	equ	0xFF2
   131                           wreg	equ	0xFE8
   132                           indf1	equ	0xFE7
   133                           plusw1	equ	0xFE3
   134                           fsr1h	equ	0xFE2
   135                           fsr1l	equ	0xFE1
   136                           indf2	equ	0xFDF
   137                           plusw2	equ	0xFDB
   138                           fsr2h	equ	0xFDA
   139                           fsr2l	equ	0xFD9
   140                           status	equ	0xFD8
   141                           
   142                           	psect	idataBANK0
   143  00083A                     __pidataBANK0:
   144                           	opt stack 0
   145                           
   146                           ;initializer for main@F14959
   147  00083A  77                 	db	119
   148  00083B  77                 	db	119
   149  00083C  77                 	db	119
   150  00083D  77                 	db	119
   151  00083E  77                 	db	119
   152  00083F  77                 	db	119
   153  000840  77                 	db	119
   154  000841  77                 	db	119
   155  0000                     _RXM0SIDH	set	3832
   156  0000                     _RXM0SIDL	set	3833
   157  0000                     _RXF0SIDH	set	3808
   158  0000                     _RXF0SIDL	set	3809
   159  0000                     _BRGCON3	set	3653
   160  0000                     _BRGCON2	set	3652
   161  0000                     _BRGCON1	set	3651
   162  0000                     _TXB0SIDH	set	3873
   163  0000                     _TXB0SIDL	set	3874
   164  0000                     _TXB0DLC	set	3877
   165  0000                     _TXB0CONbits	set	3872
   166  0000                     _TBLPTR	set	4086
   167  0000                     _TABLAT	set	4085
   168  0000                     _EECON1	set	3967
   169  0000                     _TBLPTRL	set	4086
   170  0000                     _TBLPTRH	set	4087
   171  0000                     _TBLPTRU	set	4088
   172  0000                     _EECON2	set	3966
   173  0000                     _RXB0D7	set	3949
   174  0000                     _RXB0D6	set	3948
   175  0000                     _RXB0D5	set	3947
   176  0000                     _RXB0D4	set	3946
   177  0000                     _RXB0D3	set	3945
   178  0000                     _RXB0D2	set	3944
   179  0000                     _RXB0D1	set	3943
   180  0000                     _RXB0D0	set	3942
   181  0000                     _RXB0CONbits	set	3936
   182  0000                     _PIR5bits	set	3959
   183  0000                     _STKPTR	set	4092
   184  0000                     _INTCONbits	set	4082
   185  0000                     _TMR0L	set	4054
   186  0000                     _TMR0H	set	4055
   187  0000                     _T0CON	set	4053
   188  0000                     _PIR5	set	3959
   189  0000                     _RXB0DLC	set	3941
   190  0000                     _RXB0CON	set	3936
   191  0000                     _RXB0SIDH	set	3937
   192  0000                     _RXB0SIDL	set	3938
   193  0000                     _CANSTAT	set	3950
   194  0000                     _CANCON	set	3951
   195  0000                     _LATCbits	set	3979
   196  0000                     _TRISCbits	set	3988
   197  0000                     _FREE	set	31740
   198  0000                     _WR	set	31737
   199  0000                     _GIE	set	32663
   200  0000                     _CARRY	set	32448
   201  0000                     _WREN	set	31738
   202  0000                     _CFGS	set	31742
   203  0000                     _EEPGD	set	31743
   204                           
   205                           ; #config settings
   206  0000                     stkptr	equ	0xFFC
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           intcon	equ	0xFF2
   212                           wreg	equ	0xFE8
   213                           indf1	equ	0xFE7
   214                           plusw1	equ	0xFE3
   215                           fsr1h	equ	0xFE2
   216                           fsr1l	equ	0xFE1
   217                           indf2	equ	0xFDF
   218                           plusw2	equ	0xFDB
   219                           fsr2h	equ	0xFDA
   220                           fsr2l	equ	0xFD9
   221                           status	equ	0xFD8
   222                           
   223                           	psect	cinit
   224  000602                     __pcinit:
   225                           	opt stack 0
   226  000602                     start_initialization:
   227                           	opt stack 0
   228  000602                     __initialization:
   229                           	opt stack 0
   230                           
   231                           ; Initialize objects allocated to BANK0 (8 bytes)
   232                           ; load TBLPTR registers with __pidataBANK0
   233  000602  0E3A               	movlw	low __pidataBANK0
   234  000604  6EF6               	movwf	tblptrl,c
   235  000606  0E08               	movlw	high __pidataBANK0
   236  000608  6EF7               	movwf	tblptrh,c
   237  00060A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   238  00060C  6EF8               	movwf	tblptru,c
   239  00060E  EE00  F0A0         	lfsr	0,__pdataBANK0
   240  000612  EE10 F008          	lfsr	1,8
   241  000616                     copy_data0:
   242  000616  0009               	tblrd		*+
   243  000618  CFF5 FFEE          	movff	tablat,postinc0
   244  00061C  50E5               	movf	postdec1,w,c
   245  00061E  50E1               	movf	fsr1l,w,c
   246  000620  E1FA               	bnz	copy_data0
   247                           
   248                           ; Initialize objects allocated to COMRAM (36 bytes)
   249                           ; load TBLPTR registers with __pidataCOMRAM
   250  000622  0E16               	movlw	low __pidataCOMRAM
   251  000624  6EF6               	movwf	tblptrl,c
   252  000626  0E08               	movlw	high __pidataCOMRAM
   253  000628  6EF7               	movwf	tblptrh,c
   254  00062A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   255  00062C  6EF8               	movwf	tblptru,c
   256  00062E  EE00  F02D         	lfsr	0,__pdataCOMRAM
   257  000632  EE10 F024          	lfsr	1,36
   258  000636                     copy_data1:
   259  000636  0009               	tblrd		*+
   260  000638  CFF5 FFEE          	movff	tablat,postinc0
   261  00063C  50E5               	movf	postdec1,w,c
   262  00063E  50E1               	movf	fsr1l,w,c
   263  000640  E1FA               	bnz	copy_data1
   264                           
   265                           ; Clear objects allocated to BANK0 (64 bytes)
   266  000642  EE00  F060         	lfsr	0,__pbssBANK0
   267  000646  0E40               	movlw	64
   268  000648                     clear_0:
   269  000648  6AEE               	clrf	postinc0,c
   270  00064A  06E8               	decf	wreg,f,c
   271  00064C  E1FD               	bnz	clear_0
   272                           
   273                           ; Clear objects allocated to COMRAM (13 bytes)
   274  00064E  EE00  F051         	lfsr	0,__pbssCOMRAM
   275  000652  0E0D               	movlw	13
   276  000654                     clear_1:
   277  000654  6AEE               	clrf	postinc0,c
   278  000656  06E8               	decf	wreg,f,c
   279  000658  E1FD               	bnz	clear_1
   280  00065A                     end_of_initialization:
   281                           	opt stack 0
   282  00065A                     __end_of__initialization:
   283                           	opt stack 0
   284  00065A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   285  00065C  6EF8               	movwf	tblptru,c
   286  00065E  0100               	movlb	0
   287  000660  EF02  F002         	goto	_main	;jump to C main() function
   288                           stkptr	equ	0xFFC
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           intcon	equ	0xFF2
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           indf1	equ	0xFE7
   297                           postdec1	equ	0xFE5
   298                           plusw1	equ	0xFE3
   299                           fsr1h	equ	0xFE2
   300                           fsr1l	equ	0xFE1
   301                           indf2	equ	0xFDF
   302                           plusw2	equ	0xFDB
   303                           fsr2h	equ	0xFDA
   304                           fsr2l	equ	0xFD9
   305                           status	equ	0xFD8
   306                           
   307                           	psect	bssCOMRAM
   308  000051                     __pbssCOMRAM:
   309                           	opt stack 0
   310  000051                     main@addrpoint:
   311                           	opt stack 0
   312  000051                     	ds	4
   313  000055                     main@k:
   314                           	opt stack 0
   315  000055                     	ds	2
   316  000057                     _wtime:
   317                           	opt stack 0
   318  000057                     	ds	2
   319  000059                     main@j:
   320                           	opt stack 0
   321  000059                     	ds	1
   322  00005A                     main@i:
   323                           	opt stack 0
   324  00005A                     	ds	1
   325  00005B                     main@cStartFlg:
   326                           	opt stack 0
   327  00005B                     	ds	1
   328  00005C                     _bootloader_flag:
   329                           	opt stack 0
   330  00005C                     	ds	1
   331  00005D                     _delay_boot:
   332                           	opt stack 0
   333  00005D                     	ds	1
   334                           stkptr	equ	0xFFC
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           intcon	equ	0xFF2
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           indf1	equ	0xFE7
   343                           postdec1	equ	0xFE5
   344                           plusw1	equ	0xFE3
   345                           fsr1h	equ	0xFE2
   346                           fsr1l	equ	0xFE1
   347                           indf2	equ	0xFDF
   348                           plusw2	equ	0xFDB
   349                           fsr2h	equ	0xFDA
   350                           fsr2l	equ	0xFD9
   351                           status	equ	0xFD8
   352                           
   353                           	psect	dataCOMRAM
   354  00002D                     __pdataCOMRAM:
   355                           	opt stack 0
   356  00002D                     main@F14957:
   357                           	opt stack 0
   358  00002D                     	ds	8
   359  000035                     main@F14948:
   360                           	opt stack 0
   361  000035                     	ds	7
   362  00003C                     main@F14946:
   363                           	opt stack 0
   364  00003C                     	ds	7
   365  000043                     main@cEndFlg:
   366                           	opt stack 0
   367  000043                     	ds	4
   368  000047                     _pTXB0D:
   369                           	opt stack 0
   370  000047                     	ds	2
   371  000049                     _CAN_rx_buf:
   372                           	opt stack 0
   373  000049                     	ds	8
   374                           stkptr	equ	0xFFC
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           intcon	equ	0xFF2
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           indf1	equ	0xFE7
   383                           postdec1	equ	0xFE5
   384                           plusw1	equ	0xFE3
   385                           fsr1h	equ	0xFE2
   386                           fsr1l	equ	0xFE1
   387                           indf2	equ	0xFDF
   388                           plusw2	equ	0xFDB
   389                           fsr2h	equ	0xFDA
   390                           fsr2l	equ	0xFD9
   391                           status	equ	0xFD8
   392                           
   393                           	psect	bssBANK0
   394  000060                     __pbssBANK0:
   395                           	opt stack 0
   396  000060                     main@chdata:
   397                           	opt stack 0
   398  000060                     	ds	64
   399                           stkptr	equ	0xFFC
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           intcon	equ	0xFF2
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           indf1	equ	0xFE7
   408                           postdec1	equ	0xFE5
   409                           plusw1	equ	0xFE3
   410                           fsr1h	equ	0xFE2
   411                           fsr1l	equ	0xFE1
   412                           indf2	equ	0xFDF
   413                           plusw2	equ	0xFDB
   414                           fsr2h	equ	0xFDA
   415                           fsr2l	equ	0xFD9
   416                           status	equ	0xFD8
   417                           
   418                           	psect	dataBANK0
   419  0000A0                     __pdataBANK0:
   420                           	opt stack 0
   421  0000A0                     main@F14959:
   422                           	opt stack 0
   423  0000A0                     	ds	8
   424                           stkptr	equ	0xFFC
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           intcon	equ	0xFF2
   430                           postinc0	equ	0xFEE
   431                           wreg	equ	0xFE8
   432                           indf1	equ	0xFE7
   433                           postdec1	equ	0xFE5
   434                           plusw1	equ	0xFE3
   435                           fsr1h	equ	0xFE2
   436                           fsr1l	equ	0xFE1
   437                           indf2	equ	0xFDF
   438                           plusw2	equ	0xFDB
   439                           fsr2h	equ	0xFDA
   440                           fsr2l	equ	0xFD9
   441                           status	equ	0xFD8
   442                           
   443                           	psect	cstackCOMRAM
   444  000001                     __pcstackCOMRAM:
   445                           	opt stack 0
   446  000001                     ??_init_CAN:
   447  000001                     memcpy@d1:
   448                           	opt stack 0
   449  000001                     Flash_Erasex@address:
   450                           	opt stack 0
   451  000001                     Flash_Writex@address:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x0
   455  000001                     	ds	2
   456  000003                     memcpy@s1:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x2
   460  000003                     	ds	1
   461  000004                     memcpy@n:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x3
   465  000004                     	ds	1
   466  000005                     ??_Flash_Erasex:
   467  000005                     Flash_Writex@P:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x4
   471  000005                     	ds	1
   472  000006                     Flash_Writex@length:
   473                           	opt stack 0
   474  000006                     memcpy@d:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x5
   478  000006                     	ds	1
   479  000007                     Flash_Writex@i:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x6
   483  000007                     	ds	1
   484  000008                     memcpy@s:
   485                           	opt stack 0
   486  000008                     Erase_Whole_Flash@erase:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x7
   490  000008                     	ds	1
   491  000009                     CanSendBuffer@tx_id:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x8
   495  000009                     	ds	2
   496  00000B                     CanSendBuffer@ptr:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0xA
   500  00000B                     	ds	1
   501  00000C                     CanSendBuffer@len:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0xB
   505  00000C                     	ds	1
   506  00000D                     ??_CanSendBuffer:
   507                           
   508                           ; 1 bytes @ 0xC
   509  00000D                     	ds	2
   510  00000F                     main@ch_413:
   511                           	opt stack 0
   512                           
   513                           ; 8 bytes @ 0xE
   514  00000F                     	ds	8
   515  000017                     main@chs:
   516                           	opt stack 0
   517                           
   518                           ; 8 bytes @ 0x16
   519  000017                     	ds	8
   520  00001F                     main@ch:
   521                           	opt stack 0
   522                           
   523                           ; 7 bytes @ 0x1E
   524  00001F                     	ds	7
   525  000026                     main@ch_404:
   526                           	opt stack 0
   527                           
   528                           ; 7 bytes @ 0x25
   529  000026                     	ds	7
   530                           stkptr	equ	0xFFC
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           intcon	equ	0xFF2
   536                           postinc0	equ	0xFEE
   537                           wreg	equ	0xFE8
   538                           indf1	equ	0xFE7
   539                           postdec1	equ	0xFE5
   540                           plusw1	equ	0xFE3
   541                           fsr1h	equ	0xFE2
   542                           fsr1l	equ	0xFE1
   543                           indf2	equ	0xFDF
   544                           plusw2	equ	0xFDB
   545                           fsr2h	equ	0xFDA
   546                           fsr2l	equ	0xFD9
   547                           status	equ	0xFD8
   548                           
   549 ;;
   550 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   551 ;;
   552 ;; *************** function _main *****************
   553 ;; Defined at:
   554 ;;		line 75 in file "main.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;  chs             8   22[COMRAM] unsigned char [8]
   559 ;;  ch              8   14[COMRAM] unsigned char [8]
   560 ;;  ch              7   37[COMRAM] unsigned char [7]
   561 ;;  ch              7   30[COMRAM] unsigned char [7]
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   572 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   574 ;;      Totals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   575 ;;Total ram usage:       30 bytes
   576 ;; Hardware stack levels required when called:    3
   577 ;; This function calls:
   578 ;;		_CanSendBuffer
   579 ;;		_Erase_Whole_Flash
   580 ;;		_Flash_Writex
   581 ;;		_init_CAN
   582 ;; This function is called by:
   583 ;;		Startup code after reset
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text0
   588  000404                     __ptext0:
   589                           	opt stack 0
   590  000404                     _main:
   591                           	opt stack 28
   592                           
   593                           ; BSR set to: 15
   594                           ;incstack = 0
   595  000404  EC89  F003         	call	_init_CAN	;wreg free
   596                           
   597                           ;main.c: 77: CanSendBuffer(0x7df,CAN_rx_buf,8);
   598  000408  D8D8               	call	PL4	;call to abstracted procedure
   599  00040A  D8E9               	call	PL10	;call to abstracted procedure
   600  00040C  EC32  F003         	call	_CanSendBuffer	;wreg free
   601                           
   602                           ; BSR set to: 15
   603                           ;main.c: 78: T0CON = 0x87;
   604  000410  0E87               	movlw	135
   605  000412  6ED5               	movwf	4053,c	;volatile
   606                           
   607                           ; BSR set to: 15
   608                           ;main.c: 80: TMR0H = 0xE7;
   609                           
   610                           ; BSR set to: 15
   611                           ;main.c: 81: TMR0L = 0x95;
   612  000414  D8ED               	call	PL14	;call to abstracted procedure
   613                           
   614                           ; BSR set to: 15
   615                           ;main.c: 82: delay_boot = 0;
   616  000416  6A5D               	clrf	_delay_boot,c
   617                           
   618                           ; BSR set to: 15
   619                           ;main.c: 83: bootloader_flag = 0;
   620  000418  6A5C               	clrf	_bootloader_flag,c
   621                           
   622                           ;main.c: 84: while(delay_boot < 30)
   623  00041A  D042               	goto	l1242
   624  00041C                     l113:
   625                           
   626                           ;main.c: 85: {
   627                           ;main.c: 86: if(INTCONbits.T0IF == 1)
   628  00041C  A4F2               	btfss	intcon,2,c	;volatile
   629  00041E  D01E               	goto	l1222
   630                           
   631                           ;main.c: 87: {
   632                           ;main.c: 88: INTCONbits.T0IF = 0;
   633  000420  94F2               	bcf	intcon,2,c	;volatile
   634                           
   635                           ;main.c: 89: TMR0H = 0xE7;
   636                           
   637                           ;main.c: 90: TMR0L = 0x95;
   638  000422  D8E6               	call	PL14	;call to abstracted procedure
   639                           
   640                           ;main.c: 91: delay_boot++;
   641  000424  2A5D               	incf	_delay_boot,f,c
   642                           
   643                           ;main.c: 93: CanSendBuffer(0x7df,&delay_boot,sizeof(delay_boot));
   644  000426  D8C9               	call	PL4	;call to abstracted procedure
   645  000428  0E5D               	movlw	low _delay_boot
   646  00042A  6E0B               	movwf	CanSendBuffer@ptr,c
   647  00042C  0E01               	movlw	1
   648  00042E  6E0C               	movwf	CanSendBuffer@len,c
   649  000430  EC32  F003         	call	_CanSendBuffer	;wreg free
   650                           
   651                           ; BSR set to: 15
   652                           ;main.c: 94: if ((30-1)==delay_boot)
   653  000434  0E1D               	movlw	29
   654  000436  185D               	xorwf	_delay_boot,w,c
   655  000438  E111               	bnz	l1222
   656                           
   657                           ; BSR set to: 15
   658                           ;main.c: 95: {
   659                           ;main.c: 97: unsigned char ch[]={'G','o','t','o','A','p','p'};
   660  00043A  EE20  F03C         	lfsr	2,main@F14946
   661  00043E  EE10  F01F         	lfsr	1,main@ch
   662  000442  0E06               	movlw	6
   663  000444                     u481:
   664  000444  CFDB FFE3          	movff	plusw2,plusw1
   665  000448  06E8               	decf	wreg,f,c
   666  00044A  E2FC               	bc	u481
   667                           
   668                           ; BSR set to: 15
   669                           ;main.c: 98: CanSendBuffer(0x7df,ch,sizeof(ch));
   670  00044C  D8B6               	call	PL4	;call to abstracted procedure
   671  00044E  0E1F               	movlw	low main@ch
   672  000450  D8D4               	call	PL16	;call to abstracted procedure
   673  000452  EC32  F003         	call	_CanSendBuffer	;wreg free
   674                           
   675                           ; BSR set to: 15
   676                           ;main.c: 99: STKPTR = 0x00;
   677  000456  6AFC               	clrf	stkptr,c	;# 
   678  000458  EF80 F00A          	goto	5376	;# 
   679  00045C                     l1222:
   680                           
   681                           ;main.c: 102: }
   682                           ;main.c: 103: }
   683                           ;main.c: 104: if(PIR5bits.RXB0IF == 1)
   684  00045C  A077               	btfss	3959,0,c	;volatile
   685  00045E  D020               	goto	l1242
   686                           
   687                           ;main.c: 105: {
   688                           ;main.c: 107: PIR5bits.RXB0IF = 0;
   689  000460  9077               	bcf	3959,0,c	;volatile
   690                           
   691                           ;main.c: 108: RXB0CONbits.RXFUL = 0;
   692  000462  9E60               	bcf	3936,7,c	;volatile
   693                           
   694                           ;main.c: 109: CAN_rx_buf[0]=RXB0D0; CAN_rx_buf[1]=RXB0D1;
   695                           
   696                           ;main.c: 110: CAN_rx_buf[2]=RXB0D2; CAN_rx_buf[3]=RXB0D3;
   697                           
   698                           ;main.c: 111: CAN_rx_buf[4]=RXB0D4; CAN_rx_buf[5]=RXB0D5;
   699                           
   700                           ;main.c: 112: CAN_rx_buf[6]=RXB0D6; CAN_rx_buf[7]=RXB0D7;
   701  000464  D899               	call	PL2	;call to abstracted procedure
   702                           
   703                           ;main.c: 113: switch ( CAN_rx_buf[0])
   704  000466  D013               	goto	l1236
   705  000468                     l1226:
   706                           
   707                           ;main.c: 116: {
   708                           ;main.c: 118: Erase_Whole_Flash();
   709  000468  EC62  F003         	call	_Erase_Whole_Flash	;wreg free
   710                           
   711                           ;main.c: 119: unsigned char ch[]={'A','c','k','-','-','-',0xAA};
   712  00046C  EE20  F035         	lfsr	2,main@F14948
   713  000470  EE10  F026         	lfsr	1,main@ch_404
   714  000474  0E06               	movlw	6
   715  000476                     u501:
   716  000476  CFDB FFE3          	movff	plusw2,plusw1
   717  00047A  06E8               	decf	wreg,f,c
   718  00047C  E2FC               	bc	u501
   719                           
   720                           ;main.c: 120: CanSendBuffer(0x7df,ch,sizeof(ch));
   721  00047E  D89D               	call	PL4	;call to abstracted procedure
   722  000480  0E26               	movlw	low main@ch_404
   723  000482  D8BB               	call	PL16	;call to abstracted procedure
   724  000484  EC32  F003         	call	_CanSendBuffer	;wreg free
   725                           
   726                           ; BSR set to: 15
   727                           ;main.c: 121: bootloader_flag = 1;
   728  000488  0E01               	movlw	1
   729  00048A  6E5C               	movwf	_bootloader_flag,c
   730                           
   731                           ;main.c: 122: break;
   732  00048C  D003               	goto	l1238
   733  00048E                     l1236:
   734  00048E  5049               	movf	_CAN_rx_buf,w,c
   735                           
   736                           ; Switch size 1, requested type "space"
   737                           ; Number of cases is 1, Range of values is 170 to 170
   738                           ; switch strategies available:
   739                           ; Name         Instructions Cycles
   740                           ; simple_byte            4     3 (average)
   741                           ;	Chosen strategy is simple_byte
   742  000490  0AAA               	xorlw	170	; case 170
   743  000492  E0EA               	bz	l1226
   744  000494                     l1238:
   745                           
   746                           ;main.c: 125: delay_boot = 200;
   747  000494  0EC8               	movlw	200
   748  000496  6E5D               	movwf	_delay_boot,c
   749                           
   750                           ;main.c: 126: CanSendBuffer(0x7df,CAN_rx_buf,8);
   751  000498  D890               	call	PL4	;call to abstracted procedure
   752  00049A  D8A1               	call	PL10	;call to abstracted procedure
   753  00049C  EC32  F003         	call	_CanSendBuffer	;wreg free
   754  0004A0                     l1242:
   755  0004A0  0E1D               	movlw	29
   756  0004A2  645D               	cpfsgt	_delay_boot,c
   757  0004A4  D7BB               	goto	l113
   758  0004A6                     l1244:
   759                           
   760                           ;main.c: 130: {
   761                           ;main.c: 132: if(bootloader_flag == 1)
   762  0004A6  045C               	decf	_bootloader_flag,w,c
   763  0004A8  E1FE               	bnz	l1244
   764                           
   765                           ;main.c: 133: {
   766                           ;main.c: 135: static unsigned char chdata[64];
   767                           ;main.c: 136: static unsigned char cStartFlg=0;
   768                           ;main.c: 137: static unsigned long cEndFlg=0xFFFFF;
   769                           ;main.c: 138: static unsigned char i=0,j=0;
   770                           ;main.c: 139: static unsigned int k=0;
   771                           ;main.c: 140: static unsigned long addrpoint=0;
   772                           ;main.c: 142: if(PIR5bits.RXB0IF == 1)
   773  0004AA  A077               	btfss	3959,0,c	;volatile
   774  0004AC  D048               	goto	l1310
   775                           
   776                           ;main.c: 143: {
   777                           ;main.c: 144: if(0==cStartFlg)
   778  0004AE  505B               	movf	main@cStartFlg,w,c
   779  0004B0  E110               	bnz	l1256
   780                           
   781                           ;main.c: 145: {
   782                           ;main.c: 147: unsigned char ch[]={0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x66};
   783  0004B2  EE20  F02D         	lfsr	2,main@F14957
   784  0004B6  EE10  F00F         	lfsr	1,main@ch_413
   785  0004BA  0E07               	movlw	7
   786  0004BC                     u551:
   787  0004BC  CFDB FFE3          	movff	plusw2,plusw1
   788  0004C0  06E8               	decf	wreg,f,c
   789  0004C2  E2FC               	bc	u551
   790                           
   791                           ;main.c: 148: CanSendBuffer(0x7df,ch,sizeof(ch));
   792  0004C4  D87A               	call	PL4	;call to abstracted procedure
   793  0004C6  0E0F               	movlw	low main@ch_413
   794  0004C8  D88F               	call	PL12	;call to abstracted procedure
   795  0004CA  EC32  F003         	call	_CanSendBuffer	;wreg free
   796                           
   797                           ; BSR set to: 15
   798                           ;main.c: 151: cStartFlg = 1;
   799  0004CE  0E01               	movlw	1
   800  0004D0  6E5B               	movwf	main@cStartFlg,c
   801  0004D2                     l1256:
   802                           
   803                           ;main.c: 152: }
   804                           ;main.c: 153: PIR5bits.RXB0IF = 0;
   805  0004D2  9077               	bcf	3959,0,c	;volatile
   806                           
   807                           ;main.c: 154: RXB0CONbits.RXFUL = 0;
   808  0004D4  9E60               	bcf	3936,7,c	;volatile
   809                           
   810                           ;main.c: 158: cEndFlg = 0xFFFFF;
   811  0004D6  6843               	setf	main@cEndFlg,c
   812  0004D8  6844               	setf	main@cEndFlg+1,c
   813  0004DA  0E0F               	movlw	15
   814  0004DC  6E45               	movwf	main@cEndFlg+2,c
   815  0004DE  6A46               	clrf	main@cEndFlg+3,c
   816                           
   817                           ;main.c: 159: CAN_rx_buf[0]=RXB0D0; CAN_rx_buf[1]=RXB0D1;
   818                           
   819                           ;main.c: 160: CAN_rx_buf[2]=RXB0D2; CAN_rx_buf[3]=RXB0D3;
   820                           
   821                           ;main.c: 161: CAN_rx_buf[4]=RXB0D4; CAN_rx_buf[5]=RXB0D5;
   822                           
   823                           ;main.c: 162: CAN_rx_buf[6]=RXB0D6; CAN_rx_buf[7]=RXB0D7;
   824  0004E0  D85B               	call	PL2	;call to abstracted procedure
   825                           
   826                           ;main.c: 163: CanSendBuffer(0x7df,CAN_rx_buf,8);
   827  0004E2  D86B               	call	PL4	;call to abstracted procedure
   828  0004E4  D87C               	call	PL10	;call to abstracted procedure
   829  0004E6  EC32  F003         	call	_CanSendBuffer	;wreg free
   830                           
   831                           ; BSR set to: 15
   832                           ;main.c: 164: {
   833                           ;main.c: 168: for(i=0;i<8;i++){chdata[j++]=CAN_rx_buf[i];}
   834  0004EA  6A5A               	clrf	main@i,c
   835  0004EC                     l1286:
   836  0004EC  505A               	movf	main@i,w,c
   837  0004EE  0F49               	addlw	low _CAN_rx_buf
   838  0004F0  6ED9               	movwf	fsr2l,c
   839  0004F2  6ADA               	clrf	fsr2h,c
   840  0004F4  5059               	movf	main@j,w,c
   841  0004F6  0F60               	addlw	low main@chdata
   842  0004F8  6EE1               	movwf	fsr1l,c
   843  0004FA  6AE2               	clrf	fsr1h,c
   844  0004FC  CFDF FFE7          	movff	indf2,indf1
   845  000500  2A59               	incf	main@j,f,c
   846  000502  2A5A               	incf	main@i,f,c
   847  000504  0E07               	movlw	7
   848  000506  645A               	cpfsgt	main@i,c
   849  000508  D7F1               	goto	l1286
   850                           
   851                           ;main.c: 169: if(j>=63)
   852  00050A  0E3E               	movlw	62
   853  00050C  6459               	cpfsgt	main@j,c
   854  00050E  D7CB               	goto	l1244
   855                           
   856                           ;main.c: 170: {
   857                           ;main.c: 172: if (((0x400/64)<=k)&&(k<((0x9CF+1)/64)))
   858  000510  5056               	movf	main@k+1,w,c
   859  000512  E103               	bnz	u580
   860  000514  0E10               	movlw	16
   861  000516  5C55               	subwf	main@k,w,c
   862  000518  E305               	bnc	l1302
   863  00051A                     u580:
   864  00051A  5056               	movf	main@k+1,w,c
   865  00051C  E103               	bnz	l1302
   866  00051E  0E27               	movlw	39
   867  000520  5C55               	subwf	main@k,w,c
   868  000522  E303               	bnc	l1304
   869  000524                     l1302:
   870                           
   871                           ;main.c: 176: else
   872                           ;main.c: 177: {
   873                           ;main.c: 179: Flash_Writex(addrpoint,chdata,64);
   874  000524  D84F               	call	PL6	;call to abstracted procedure
   875  000526  ECAD  F003         	call	_Flash_Writex	;wreg free
   876  00052A                     l1304:
   877                           
   878                           ;main.c: 180: }
   879                           ;main.c: 182: j=0;
   880  00052A  6A59               	clrf	main@j,c
   881                           
   882                           ;main.c: 184: k++;
   883  00052C  4A55               	infsnz	main@k,f,c
   884  00052E  2A56               	incf	main@k+1,f,c
   885                           
   886                           ;main.c: 185: addrpoint+=64;
   887  000530  0E40               	movlw	64
   888  000532  2651               	addwf	main@addrpoint,f,c
   889  000534  0E00               	movlw	0
   890  000536  2252               	addwfc	main@addrpoint+1,f,c
   891  000538  2253               	addwfc	main@addrpoint+2,f,c
   892  00053A  2254               	addwfc	main@addrpoint+3,f,c
   893  00053C  D7B4               	goto	l1244
   894  00053E                     l1310:
   895                           
   896                           ;main.c: 189: else
   897                           ;main.c: 190: {
   898                           ;main.c: 191: if(1==cStartFlg)
   899  00053E  045B               	decf	main@cStartFlg,w,c
   900  000540  E1B2               	bnz	l1244
   901                           
   902                           ;main.c: 192: {
   903                           ;main.c: 194: cEndFlg--;
   904  000542  0643               	decf	main@cEndFlg,f,c
   905  000544  0E00               	movlw	0
   906  000546  5A44               	subwfb	main@cEndFlg+1,f,c
   907  000548  5A45               	subwfb	main@cEndFlg+2,f,c
   908  00054A  5A46               	subwfb	main@cEndFlg+3,f,c
   909                           
   910                           ;main.c: 195: if (0==cEndFlg)
   911  00054C  5043               	movf	main@cEndFlg,w,c
   912  00054E  1044               	iorwf	main@cEndFlg+1,w,c
   913  000550  1045               	iorwf	main@cEndFlg+2,w,c
   914  000552  1046               	iorwf	main@cEndFlg+3,w,c
   915  000554  E1A8               	bnz	l1244
   916                           
   917                           ;main.c: 196: {
   918                           ;main.c: 198: unsigned char chs[]={0x77,0x77,0x77,0x77,0x77,0x77,0x77,0x77};
   919  000556  EE20  F0A0         	lfsr	2,main@F14959
   920  00055A  EE10  F017         	lfsr	1,main@chs
   921  00055E  0E07               	movlw	7
   922  000560                     u621:
   923  000560  CFDB FFE3          	movff	plusw2,plusw1
   924  000564  06E8               	decf	wreg,f,c
   925  000566  E2FC               	bc	u621
   926                           
   927                           ;main.c: 199: CanSendBuffer(0x7df,chs,sizeof(chs));
   928  000568  D828               	call	PL4	;call to abstracted procedure
   929  00056A  0E17               	movlw	low main@chs
   930  00056C  D83D               	call	PL12	;call to abstracted procedure
   931  00056E  EC32  F003         	call	_CanSendBuffer	;wreg free
   932                           
   933                           ; BSR set to: 15
   934                           ;main.c: 201: if (j<63)
   935  000572  0E3F               	movlw	63
   936  000574  6059               	cpfslt	main@j,c
   937  000576  D797               	goto	l1244
   938                           
   939                           ; BSR set to: 15
   940                           ;main.c: 202: {
   941                           ;main.c: 203: for(i=j;i<=63;i++){chdata[i]=0xFF;}
   942  000578  C059  F05A         	movff	main@j,main@i
   943  00057C  D006               	goto	l1326
   944  00057E                     l1322:
   945  00057E  505A               	movf	main@i,w,c
   946  000580  0F60               	addlw	low main@chdata
   947  000582  6ED9               	movwf	fsr2l,c
   948  000584  6ADA               	clrf	fsr2h,c
   949  000586  68DF               	setf	indf2,c
   950  000588  2A5A               	incf	main@i,f,c
   951  00058A                     l1326:
   952  00058A  0E3F               	movlw	63
   953  00058C  645A               	cpfsgt	main@i,c
   954  00058E  D7F7               	goto	l1322
   955                           
   956                           ;main.c: 204: Flash_Writex(addrpoint,chdata,64);
   957  000590  D819               	call	PL6	;call to abstracted procedure
   958  000592  ECAD  F003         	call	_Flash_Writex	;wreg free
   959  000596  D787               	goto	l1244
   960  000598                     __end_of_main:
   961                           	opt stack 0
   962  000598                     PL2:
   963                           	opt stack 28
   964  000598  CF66 F049          	movff	3942,_CAN_rx_buf	;volatile
   965  00059C  CF67 F04A          	movff	3943,_CAN_rx_buf+1	;volatile
   966  0005A0  CF68 F04B          	movff	3944,_CAN_rx_buf+2	;volatile
   967  0005A4  CF69 F04C          	movff	3945,_CAN_rx_buf+3	;volatile
   968  0005A8  CF6A F04D          	movff	3946,_CAN_rx_buf+4	;volatile
   969  0005AC  CF6B F04E          	movff	3947,_CAN_rx_buf+5	;volatile
   970  0005B0  CF6C F04F          	movff	3948,_CAN_rx_buf+6	;volatile
   971  0005B4  CF6D F050          	movff	3949,_CAN_rx_buf+7	;volatile
   972  0005B8  0012               	return	
   973  0005BA                     __end_ofPL2:
   974                           	opt stack 0
   975  0005BA                     PL4:
   976                           	opt stack 28
   977  0005BA  0E07               	movlw	7
   978  0005BC  6E0A               	movwf	CanSendBuffer@tx_id+1,c
   979  0005BE  0EDF               	movlw	223
   980  0005C0  6E09               	movwf	CanSendBuffer@tx_id,c
   981  0005C2  0CDF               	retlw	223
   982  0005C4                     __end_ofPL4:
   983                           	opt stack 0
   984  0005C4                     PL6:
   985                           	opt stack 28
   986  0005C4  C051  F001         	movff	main@addrpoint,Flash_Writex@address
   987  0005C8  C052  F002         	movff	main@addrpoint+1,Flash_Writex@address+1
   988  0005CC  C053  F003         	movff	main@addrpoint+2,Flash_Writex@address+2
   989  0005D0  C054  F004         	movff	main@addrpoint+3,Flash_Writex@address+3
   990  0005D4  0E60               	movlw	low main@chdata
   991  0005D6  6E05               	movwf	Flash_Writex@P,c
   992  0005D8  0E40               	movlw	64
   993  0005DA  6E06               	movwf	Flash_Writex@length,c
   994  0005DC  0C40               	retlw	64
   995  0005DE                     __end_ofPL6:
   996                           	opt stack 0
   997  0005DE                     PL10:
   998                           	opt stack 28
   999  0005DE  0E49               	movlw	low _CAN_rx_buf
  1000  0005E0  6E0B               	movwf	CanSendBuffer@ptr,c
  1001  0005E2  0E08               	movlw	8
  1002  0005E4  6E0C               	movwf	CanSendBuffer@len,c
  1003  0005E6  0C08               	retlw	8
  1004  0005E8                     __end_ofPL10:
  1005                           	opt stack 0
  1006  0005E8                     PL12:
  1007                           	opt stack 28
  1008  0005E8  6E0B               	movwf	CanSendBuffer@ptr,c
  1009  0005EA  0E08               	movlw	8
  1010  0005EC  6E0C               	movwf	CanSendBuffer@len,c
  1011  0005EE  0C08               	retlw	8
  1012  0005F0                     __end_ofPL12:
  1013                           	opt stack 0
  1014  0005F0                     PL14:
  1015                           	opt stack 28
  1016  0005F0  0EE7               	movlw	231
  1017  0005F2  6ED7               	movwf	4055,c	;volatile
  1018  0005F4  0E95               	movlw	149
  1019  0005F6  6ED6               	movwf	4054,c	;volatile
  1020  0005F8  0C95               	retlw	149
  1021  0005FA                     __end_ofPL14:
  1022                           	opt stack 0
  1023  0005FA                     PL16:
  1024                           	opt stack 28
  1025  0005FA  6E0B               	movwf	CanSendBuffer@ptr,c
  1026  0005FC  0E07               	movlw	7
  1027  0005FE  6E0C               	movwf	CanSendBuffer@len,c
  1028  000600  0C07               	retlw	7
  1029  000602                     __end_ofPL16:
  1030                           	opt stack 0
  1031                           stkptr	equ	0xFFC
  1032                           tblptru	equ	0xFF8
  1033                           tblptrh	equ	0xFF7
  1034                           tblptrl	equ	0xFF6
  1035                           tablat	equ	0xFF5
  1036                           intcon	equ	0xFF2
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           indf1	equ	0xFE7
  1040                           postdec1	equ	0xFE5
  1041                           plusw1	equ	0xFE3
  1042                           fsr1h	equ	0xFE2
  1043                           fsr1l	equ	0xFE1
  1044                           indf2	equ	0xFDF
  1045                           plusw2	equ	0xFDB
  1046                           fsr2h	equ	0xFDA
  1047                           fsr2l	equ	0xFD9
  1048                           status	equ	0xFD8
  1049                           
  1050 ;; *************** function _init_CAN *****************
  1051 ;; Defined at:
  1052 ;;		line 16 in file "CAN.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  CAN_RX_Adres    2    0        unsigned int 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,2, status,0
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1068 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1069 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1070 ;;Total ram usage:        3 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text1
  1080  000712                     __ptext1:
  1081                           	opt stack 0
  1082  000712                     _init_CAN:
  1083                           	opt stack 30
  1084                           
  1085                           ;CAN.c: 18: TRISCbits.TRISC6=0;
  1086                           
  1087                           ;incstack = 0
  1088  000712  9C94               	bcf	3988,6,c	;volatile
  1089                           
  1090                           ;CAN.c: 19: LATCbits.LATC6=0;
  1091  000714  9C8B               	bcf	3979,6,c	;volatile
  1092                           
  1093                           ;CAN.c: 20: TRISCbits.TRISC7=1;
  1094  000716  8E94               	bsf	3988,7,c	;volatile
  1095                           
  1096                           ;CAN.c: 21: CANCON = 0x80;
  1097  000718  0E80               	movlw	128
  1098  00071A  6E6F               	movwf	3951,c	;volatile
  1099  00071C                     l51:
  1100  00071C  AE6E               	btfss	3950,7,c	;volatile
  1101  00071E  D7FE               	goto	l51
  1102                           
  1103                           ;CAN.c: 23: BRGCON1 = 0x13;
  1104  000720  0E13               	movlw	19
  1105  000722  010E               	movlb	14	; () banked
  1106  000724  6F43               	movwf	67,b	;volatile
  1107                           
  1108                           ;CAN.c: 25: BRGCON2 = 0x98;
  1109  000726  0E98               	movlw	152
  1110  000728  6F44               	movwf	68,b	;volatile
  1111                           
  1112                           ;CAN.c: 26: BRGCON3 = 0x01;
  1113  00072A  0E01               	movlw	1
  1114  00072C  6F45               	movwf	69,b	;volatile
  1115                           
  1116                           ; BSR set to: 14
  1117                           ;CAN.c: 27: RXB0SIDL = (CAN_RX_Adress<<5) & 0xe0;
  1118  00072E  0EE0               	movlw	224
  1119  000730  6E62               	movwf	3938,c	;volatile
  1120                           
  1121                           ; BSR set to: 14
  1122                           ;CAN.c: 28: RXB0SIDH = (CAN_RX_Adress>>3) & 0xff;
  1123  000732  6E61               	movwf	3937,c	;volatile
  1124                           
  1125                           ;CAN.c: 29: RXB0CON = 0X20;
  1126  000734  0E20               	movlw	32
  1127  000736  6E60               	movwf	3936,c	;volatile
  1128                           
  1129                           ;CAN.c: 30: RXB0DLC = 0X08;
  1130  000738  0E08               	movlw	8
  1131  00073A  6E65               	movwf	3941,c	;volatile
  1132                           
  1133                           ; BSR set to: 14
  1134                           ;CAN.c: 31: RXF0SIDL = (CAN_RX_Adress<<5) & 0xe0;
  1135  00073C  0EE0               	movlw	224
  1136  00073E  6FE1               	movwf	225,b	;volatile
  1137                           
  1138                           ; BSR set to: 14
  1139                           ;CAN.c: 32: RXF0SIDH = (CAN_RX_Adress>>3) & 0xff;
  1140  000740  6FE0               	movwf	224,b	;volatile
  1141                           
  1142                           ;CAN.c: 33: RXM0SIDL = 0Xe0;
  1143  000742  6FF9               	movwf	249,b	;volatile
  1144                           
  1145                           ; BSR set to: 14
  1146                           ;CAN.c: 34: RXM0SIDH = 0Xff;
  1147  000744  69F8               	setf	248,b	;volatile
  1148                           
  1149                           ; BSR set to: 14
  1150                           ;CAN.c: 35: CANCON = 0X00;
  1151  000746  6A6F               	clrf	3951,c	;volatile
  1152  000748                     l1140:
  1153  000748  CF6E F001          	movff	3950,??_init_CAN	;volatile
  1154  00074C  0EE0               	movlw	224
  1155  00074E  1601               	andwf	??_init_CAN,f,c
  1156  000750  E1FB               	bnz	l1140
  1157                           
  1158                           ;CAN.c: 37: PIR5 = 0X00;
  1159  000752  6A77               	clrf	3959,c	;volatile
  1160                           
  1161                           ;CAN.c: 38: TRISCbits.TRISC1 = 0;
  1162  000754  9294               	bcf	3988,1,c	;volatile
  1163                           
  1164                           ;CAN.c: 39: LATCbits.LATC1 = 1;
  1165  000756  828B               	bsf	3979,1,c	;volatile
  1166  000758  0012               	return		;funcret
  1167  00075A                     __end_of_init_CAN:
  1168                           	opt stack 0
  1169                           stkptr	equ	0xFFC
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           intcon	equ	0xFF2
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           indf1	equ	0xFE7
  1178                           postdec1	equ	0xFE5
  1179                           plusw1	equ	0xFE3
  1180                           fsr1h	equ	0xFE2
  1181                           fsr1l	equ	0xFE1
  1182                           indf2	equ	0xFDF
  1183                           plusw2	equ	0xFDB
  1184                           fsr2h	equ	0xFDA
  1185                           fsr2l	equ	0xFD9
  1186                           status	equ	0xFD8
  1187                           
  1188 ;; *************** function _Flash_Writex *****************
  1189 ;; Defined at:
  1190 ;;		line 60 in file "flash.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  address         4    0[COMRAM] unsigned long 
  1193 ;;  P               1    4[COMRAM] PTR unsigned char 
  1194 ;;		 -> main@chdata(64), 
  1195 ;;  length          1    5[COMRAM] unsigned char 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  i               1    6[COMRAM] unsigned char 
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/F
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1207 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1210 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1211 ;;Total ram usage:        7 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; Hardware stack levels required when called:    1
  1214 ;; This function calls:
  1215 ;;		_Write_Cycle
  1216 ;; This function is called by:
  1217 ;;		_main
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text2
  1222  00075A                     __ptext2:
  1223                           	opt stack 0
  1224  00075A                     _Flash_Writex:
  1225                           	opt stack 0
  1226                           
  1227                           ;flash.c: 62: TBLPTR = (address);
  1228                           
  1229                           ;incstack = 0
  1230  00075A  D813               	call	PL8	;call to abstracted procedure
  1231                           
  1232                           ;flash.c: 63: __nop();
  1233  00075C  F000               	nop	
  1234                           
  1235                           ;flash.c: 64: EECON1=0;
  1236  00075E  6A7F               	clrf	3967,c	;volatile
  1237                           
  1238                           ;flash.c: 65: for(i=0; i< length;i++)
  1239  000760  6A07               	clrf	Flash_Writex@i,c
  1240  000762  D008               	goto	l1188
  1241  000764                     l1182:
  1242                           
  1243                           ;flash.c: 66: { TABLAT = *P;
  1244  000764  5005               	movf	Flash_Writex@P,w,c
  1245  000766  6ED9               	movwf	fsr2l,c
  1246  000768  6ADA               	clrf	fsr2h,c
  1247  00076A  50DF               	movf	indf2,w,c
  1248  00076C  6EF5               	movwf	tablat,c	;volatile
  1249  00076E  000D               	tblwt		*+	;# 
  1250                           
  1251                           ;flash.c: 68: P++;
  1252  000770  2A05               	incf	Flash_Writex@P,f,c
  1253  000772  2A07               	incf	Flash_Writex@i,f,c
  1254  000774                     l1188:
  1255  000774  5006               	movf	Flash_Writex@length,w,c
  1256  000776  5C07               	subwf	Flash_Writex@i,w,c
  1257  000778  E3F5               	bnc	l1182
  1258                           
  1259                           ;flash.c: 69: }
  1260                           ;flash.c: 70: TBLPTR = (address);
  1261  00077A  D803               	call	PL8	;call to abstracted procedure
  1262                           
  1263                           ;flash.c: 71: FREE = 0;
  1264  00077C  987F               	bcf	3967,4,c	;volatile
  1265                           
  1266                           ;flash.c: 72: Write_Cycle();
  1267  00077E  EFF7  F003         	goto	_Write_Cycle	;wreg free
  1268  000782                     __end_of_Flash_Writex:
  1269                           	opt stack 0
  1270  000782                     PL8:
  1271                           	opt stack 29
  1272  000782  C001  FFF6         	movff	Flash_Writex@address,tblptrl	;volatile
  1273  000786  C002  FFF7         	movff	Flash_Writex@address+1,tblptrh	;volatile
  1274  00078A  C003  FFF8         	movff	Flash_Writex@address+2,tblptru	;volatile
  1275  00078E  0012               	return	
  1276  000790                     __end_ofPL8:
  1277                           	opt stack 0
  1278                           stkptr	equ	0xFFC
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           intcon	equ	0xFF2
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           indf1	equ	0xFE7
  1287                           postdec1	equ	0xFE5
  1288                           plusw1	equ	0xFE3
  1289                           fsr1h	equ	0xFE2
  1290                           fsr1l	equ	0xFE1
  1291                           indf2	equ	0xFDF
  1292                           plusw2	equ	0xFDB
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _Erase_Whole_Flash *****************
  1298 ;; Defined at:
  1299 ;;		line 31 in file "flash.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  erase           2    7[COMRAM] unsigned int 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/F
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1314 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1316 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1317 ;;Total ram usage:        2 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    2
  1320 ;; This function calls:
  1321 ;;		_Flash_Erasex
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text3
  1328  0006C4                     __ptext3:
  1329                           	opt stack 0
  1330  0006C4                     _Erase_Whole_Flash:
  1331                           	opt stack 28
  1332                           
  1333                           ;flash.c: 33: erase = 0;
  1334                           
  1335                           ;incstack = 0
  1336  0006C4  6A08               	clrf	Erase_Whole_Flash@erase,c
  1337  0006C6  6A09               	clrf	Erase_Whole_Flash@erase+1,c
  1338                           
  1339                           ;flash.c: 34: while(erase <= 0x7fc0)
  1340  0006C8  D014               	goto	l1170
  1341  0006CA                     l1160:
  1342                           
  1343                           ;flash.c: 35: {
  1344                           ;flash.c: 36: if ((0x400<=erase)&&(erase<0x9CF))
  1345  0006CA  0E04               	movlw	4
  1346  0006CC  5C09               	subwf	Erase_Whole_Flash@erase+1,w,c
  1347  0006CE  E305               	bnc	l1166
  1348  0006D0  0ECF               	movlw	207
  1349  0006D2  5C08               	subwf	Erase_Whole_Flash@erase,w,c
  1350  0006D4  0E09               	movlw	9
  1351  0006D6  5809               	subwfb	Erase_Whole_Flash@erase+1,w,c
  1352  0006D8  E308               	bnc	l1168
  1353  0006DA                     l1166:
  1354                           
  1355                           ;flash.c: 41: else
  1356                           ;flash.c: 42: {
  1357                           ;flash.c: 43: Flash_Erasex(erase);
  1358  0006DA  C008  F001         	movff	Erase_Whole_Flash@erase,Flash_Erasex@address
  1359  0006DE  C009  F002         	movff	Erase_Whole_Flash@erase+1,Flash_Erasex@address+1
  1360  0006E2  6A03               	clrf	Flash_Erasex@address+2,c
  1361  0006E4  6A04               	clrf	Flash_Erasex@address+3,c
  1362  0006E6  ECE3  F003         	call	_Flash_Erasex	;wreg free
  1363  0006EA                     l1168:
  1364                           
  1365                           ;flash.c: 44: }
  1366                           ;flash.c: 45: erase += 64;
  1367  0006EA  0E40               	movlw	64
  1368  0006EC  2608               	addwf	Erase_Whole_Flash@erase,f,c
  1369  0006EE  0E00               	movlw	0
  1370  0006F0  2209               	addwfc	Erase_Whole_Flash@erase+1,f,c
  1371  0006F2                     l1170:
  1372  0006F2  0EC1               	movlw	193
  1373  0006F4  5C08               	subwf	Erase_Whole_Flash@erase,w,c
  1374  0006F6  0E7F               	movlw	127
  1375  0006F8  5809               	subwfb	Erase_Whole_Flash@erase+1,w,c
  1376  0006FA  E3E7               	bnc	l1160
  1377                           
  1378                           ;flash.c: 46: }
  1379                           ;flash.c: 47: for(erase=0;erase<=6553;erase++){asm("NOP");}
  1380  0006FC  6A08               	clrf	Erase_Whole_Flash@erase,c
  1381  0006FE  6A09               	clrf	Erase_Whole_Flash@erase+1,c
  1382  000700                     l210:
  1383  000700  F000               	nop		;# 
  1384  000702  4A08               	infsnz	Erase_Whole_Flash@erase,f,c
  1385  000704  2A09               	incf	Erase_Whole_Flash@erase+1,f,c
  1386  000706  0E9A               	movlw	154
  1387  000708  5C08               	subwf	Erase_Whole_Flash@erase,w,c
  1388  00070A  0E19               	movlw	25
  1389  00070C  5809               	subwfb	Erase_Whole_Flash@erase+1,w,c
  1390  00070E  E3F8               	bnc	l210
  1391  000710  0012               	return		;funcret
  1392  000712                     __end_of_Erase_Whole_Flash:
  1393                           	opt stack 0
  1394                           stkptr	equ	0xFFC
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           intcon	equ	0xFF2
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           indf1	equ	0xFE7
  1403                           postdec1	equ	0xFE5
  1404                           plusw1	equ	0xFE3
  1405                           fsr1h	equ	0xFE2
  1406                           fsr1l	equ	0xFE1
  1407                           indf2	equ	0xFDF
  1408                           plusw2	equ	0xFDB
  1409                           fsr2h	equ	0xFDA
  1410                           fsr2l	equ	0xFD9
  1411                           status	equ	0xFD8
  1412                           
  1413 ;; *************** function _Flash_Erasex *****************
  1414 ;; Defined at:
  1415 ;;		line 23 in file "flash.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  address         4    0[COMRAM] unsigned long 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/F
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1432 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1433 ;;Total ram usage:        7 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    1
  1436 ;; This function calls:
  1437 ;;		_Write_Cycle
  1438 ;; This function is called by:
  1439 ;;		_Erase_Whole_Flash
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text4
  1444  0007C6                     __ptext4:
  1445                           	opt stack 0
  1446  0007C6                     _Flash_Erasex:
  1447                           	opt stack 28
  1448                           
  1449                           ;incstack = 0
  1450  0007C6  C002  F005         	movff	Flash_Erasex@address+1,??_Flash_Erasex
  1451  0007CA  C003  F006         	movff	Flash_Erasex@address+2,??_Flash_Erasex+1
  1452  0007CE  C004  F007         	movff	Flash_Erasex@address+3,??_Flash_Erasex+2
  1453  0007D2  C006  F005         	movff	??_Flash_Erasex+1,??_Flash_Erasex
  1454  0007D6  C007  F006         	movff	??_Flash_Erasex+2,??_Flash_Erasex+1
  1455  0007DA  6A07               	clrf	??_Flash_Erasex+2,c
  1456  0007DC  5005               	movf	??_Flash_Erasex,w,c
  1457  0007DE  6EF8               	movwf	tblptru,c	;volatile
  1458                           
  1459                           ;flash.c: 25: TBLPTRH = address >> 8;
  1460  0007E0  C002  FFF7         	movff	Flash_Erasex@address+1,tblptrh	;volatile
  1461                           
  1462                           ;flash.c: 26: TBLPTRL = address;
  1463  0007E4  C001  FFF6         	movff	Flash_Erasex@address,tblptrl	;volatile
  1464                           
  1465                           ;flash.c: 27: FREE = 1;
  1466  0007E8  887F               	bsf	3967,4,c	;volatile
  1467                           
  1468                           ;flash.c: 28: Write_Cycle();
  1469  0007EA  EFF7  F003         	goto	_Write_Cycle	;wreg free
  1470  0007EE                     __end_of_Flash_Erasex:
  1471                           	opt stack 0
  1472                           stkptr	equ	0xFFC
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           intcon	equ	0xFF2
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           indf1	equ	0xFE7
  1481                           postdec1	equ	0xFE5
  1482                           plusw1	equ	0xFE3
  1483                           fsr1h	equ	0xFE2
  1484                           fsr1l	equ	0xFE1
  1485                           indf2	equ	0xFDF
  1486                           plusw2	equ	0xFDB
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _Write_Cycle *****************
  1492 ;; Defined at:
  1493 ;;		line 7 in file "flash.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/F
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_Flash_Erasex
  1517 ;;		_Flash_Writex
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text5
  1522  0007EE                     __ptext5:
  1523                           	opt stack 0
  1524  0007EE                     _Write_Cycle:
  1525                           	opt stack 29
  1526                           
  1527                           ;incstack = 0
  1528  0007EE  8E7F               	bsf	3967,7,c	;volatile
  1529  0007F0  9C7F               	bcf	3967,6,c	;volatile
  1530                           
  1531                           ;flash.c: 9: WREN = 1; CARRY = 0;
  1532  0007F2  847F               	bsf	3967,2,c	;volatile
  1533  0007F4  90D8               	bcf	status,0,c	;volatile
  1534                           
  1535                           ;flash.c: 10: if(GIE){CARRY = 1;}
  1536  0007F6  BEF2               	btfsc	intcon,7,c	;volatile
  1537  0007F8  80D8               	bsf	status,0,c	;volatile
  1538                           
  1539                           ;flash.c: 12: GIE = 0;
  1540  0007FA  9EF2               	bcf	intcon,7,c	;volatile
  1541                           
  1542                           ;flash.c: 13: EECON2 = 0X55;
  1543  0007FC  0E55               	movlw	85
  1544  0007FE  6E7E               	movwf	3966,c	;volatile
  1545                           
  1546                           ;flash.c: 14: EECON2 = 0XAA;
  1547  000800  0EAA               	movlw	170
  1548  000802  6E7E               	movwf	3966,c	;volatile
  1549                           
  1550                           ;flash.c: 15: WR = 1;
  1551  000804  827F               	bsf	3967,1,c	;volatile
  1552                           
  1553                           ;flash.c: 16: __nop();
  1554  000806  F000               	nop	
  1555                           
  1556                           ;flash.c: 17: __nop();
  1557  000808  F000               	nop	
  1558  00080A                     l195:
  1559  00080A  B27F               	btfsc	3967,1,c	;volatile
  1560  00080C  D7FE               	goto	l195
  1561                           
  1562                           ;flash.c: 19: WREN = 0;
  1563  00080E  947F               	bcf	3967,2,c	;volatile
  1564                           
  1565                           ;flash.c: 20: if(CARRY){GIE = 1;}
  1566  000810  B0D8               	btfsc	status,0,c	;volatile
  1567  000812  8EF2               	bsf	intcon,7,c	;volatile
  1568  000814  0012               	return		;funcret
  1569  000816                     __end_of_Write_Cycle:
  1570                           	opt stack 0
  1571                           stkptr	equ	0xFFC
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           intcon	equ	0xFF2
  1577                           postinc0	equ	0xFEE
  1578                           wreg	equ	0xFE8
  1579                           indf1	equ	0xFE7
  1580                           postdec1	equ	0xFE5
  1581                           plusw1	equ	0xFE3
  1582                           fsr1h	equ	0xFE2
  1583                           fsr1l	equ	0xFE1
  1584                           indf2	equ	0xFDF
  1585                           plusw2	equ	0xFDB
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _CanSendBuffer *****************
  1591 ;; Defined at:
  1592 ;;		line 41 in file "CAN.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  tx_id           2    8[COMRAM] unsigned int 
  1595 ;;  ptr             1   10[COMRAM] PTR unsigned char 
  1596 ;;		 -> main@chs(8), main@ch_413(8), main@ch_404(7), main@ch(7), 
  1597 ;;		 -> delay_boot(1), CAN_rx_buf(8), 
  1598 ;;  len             1   11[COMRAM] unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 3F/F
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1610 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1612 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1613 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1614 ;;Total ram usage:        6 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    1
  1617 ;; This function calls:
  1618 ;;		_memcpy
  1619 ;; This function is called by:
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text6
  1625  000664                     __ptext6:
  1626                           	opt stack 0
  1627  000664                     _CanSendBuffer:
  1628                           	opt stack 29
  1629                           
  1630                           ;CAN.c: 43: TXB0CONbits.TXREQ = 0;
  1631                           
  1632                           ;incstack = 0
  1633  000664  010F               	movlb	15	; () banked
  1634  000666  9720               	bcf	32,3,b	;volatile
  1635                           
  1636                           ;CAN.c: 44: TXB0DLC = len;
  1637  000668  C00C  FF25         	movff	CanSendBuffer@len,3877	;volatile
  1638                           
  1639                           ; BSR set to: 15
  1640                           ;CAN.c: 45: TXB0SIDL = (tx_id<<5) & 0xe0;
  1641  00066C  3809               	swapf	CanSendBuffer@tx_id,w,c
  1642  00066E  46E8               	rlncf	wreg,f,c
  1643  000670  0BE0               	andlw	224
  1644  000672  6F22               	movwf	34,b	;volatile
  1645                           
  1646                           ;CAN.c: 46: TXB0SIDH = (tx_id>>3) & 0xff;
  1647  000674  C009  F00D         	movff	CanSendBuffer@tx_id,??_CanSendBuffer
  1648  000678  C00A  F00E         	movff	CanSendBuffer@tx_id+1,??_CanSendBuffer+1
  1649  00067C  90D8               	bcf	status,0,c
  1650  00067E  320E               	rrcf	??_CanSendBuffer+1,f,c
  1651  000680  320D               	rrcf	??_CanSendBuffer,f,c
  1652  000682  90D8               	bcf	status,0,c
  1653  000684  320E               	rrcf	??_CanSendBuffer+1,f,c
  1654  000686  320D               	rrcf	??_CanSendBuffer,f,c
  1655  000688  90D8               	bcf	status,0,c
  1656  00068A  320E               	rrcf	??_CanSendBuffer+1,f,c
  1657  00068C  320D               	rrcf	??_CanSendBuffer,f,c
  1658  00068E  500D               	movf	??_CanSendBuffer,w,c
  1659  000690  6F21               	movwf	33,b	;volatile
  1660                           
  1661                           ; BSR set to: 15
  1662                           ;CAN.c: 47: memcpy(pTXB0D,ptr,len);
  1663  000692  0E26               	movlw	38
  1664  000694  6E01               	movwf	memcpy@d1,c
  1665  000696  0E0F               	movlw	15
  1666  000698  6E02               	movwf	memcpy@d1+1,c
  1667  00069A  C00B  F003         	movff	CanSendBuffer@ptr,memcpy@s1
  1668  00069E  C00C  F004         	movff	CanSendBuffer@len,memcpy@n
  1669  0006A2  6A05               	clrf	memcpy@n+1,c
  1670  0006A4  ECC8  F003         	call	_memcpy	;wreg free
  1671                           
  1672                           ; BSR set to: 15
  1673                           ;CAN.c: 48: TXB0CONbits.TXREQ = 1;
  1674  0006A8  8720               	bsf	32,3,b	;volatile
  1675                           
  1676                           ; BSR set to: 15
  1677                           ;CAN.c: 49: wtime =0;
  1678  0006AA  6A57               	clrf	_wtime,c
  1679  0006AC  6A58               	clrf	_wtime+1,c
  1680                           
  1681                           ;CAN.c: 50: while((TXB0CONbits.TXREQ == 1)&&(wtime < 40000)){wtime++;}
  1682  0006AE  D002               	goto	l1154
  1683  0006B0                     l1152:
  1684                           
  1685                           ; BSR set to: 15
  1686  0006B0  4A57               	infsnz	_wtime,f,c
  1687  0006B2  2A58               	incf	_wtime+1,f,c
  1688  0006B4                     l1154:
  1689                           
  1690                           ; BSR set to: 15
  1691  0006B4  A720               	btfss	32,3,b	;volatile
  1692  0006B6  0012               	return	
  1693                           
  1694                           ; BSR set to: 15
  1695  0006B8  0E40               	movlw	64
  1696  0006BA  5C57               	subwf	_wtime,w,c
  1697  0006BC  0E9C               	movlw	156
  1698  0006BE  5858               	subwfb	_wtime+1,w,c
  1699  0006C0  E3F7               	bnc	l1152
  1700                           
  1701                           ; BSR set to: 15
  1702  0006C2  0012               	return		;funcret
  1703  0006C4                     __end_of_CanSendBuffer:
  1704                           	opt stack 0
  1705                           stkptr	equ	0xFFC
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           intcon	equ	0xFF2
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           indf1	equ	0xFE7
  1714                           postdec1	equ	0xFE5
  1715                           plusw1	equ	0xFE3
  1716                           fsr1h	equ	0xFE2
  1717                           fsr1l	equ	0xFE1
  1718                           indf2	equ	0xFDF
  1719                           plusw2	equ	0xFDB
  1720                           fsr2h	equ	0xFDA
  1721                           fsr2l	equ	0xFD9
  1722                           status	equ	0xFD8
  1723                           
  1724 ;; *************** function _memcpy *****************
  1725 ;; Defined at:
  1726 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memcpy.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  d1              2    0[COMRAM] PTR void 
  1729 ;;		 -> RAM(3648), 
  1730 ;;  s1              1    2[COMRAM] PTR const void 
  1731 ;;		 -> main@chs(8), main@ch_413(8), main@ch_404(7), main@ch(7), 
  1732 ;;		 -> delay_boot(1), CAN_rx_buf(8), 
  1733 ;;  n               2    3[COMRAM] unsigned int 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  d               2    5[COMRAM] PTR unsigned char 
  1736 ;;		 -> RAM(3648), 
  1737 ;;  s               1    7[COMRAM] PTR const unsigned char 
  1738 ;;		 -> main@chs(8), main@ch_413(8), main@ch_404(7), main@ch(7), 
  1739 ;;		 -> delay_boot(1), CAN_rx_buf(8), 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  2    0[COMRAM] PTR void 
  1742 ;; Registers used:
  1743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1744 ;; Tracked objects:
  1745 ;;		On entry : 3F/F
  1746 ;;		On exit  : 3F/F
  1747 ;;		Unchanged: 3E/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1749 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1750 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1752 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1753 ;;Total ram usage:        8 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_CanSendBuffer
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text7
  1763  000790                     __ptext7:
  1764                           	opt stack 0
  1765  000790                     _memcpy:
  1766                           	opt stack 29
  1767                           
  1768                           ; BSR set to: 15
  1769                           
  1770                           ; BSR set to: 15
  1771                           ;incstack = 0
  1772  000790  C003  F008         	movff	memcpy@s1,memcpy@s
  1773  000794  C001  F006         	movff	memcpy@d1,memcpy@d
  1774  000798  C002  F007         	movff	memcpy@d1+1,memcpy@d+1
  1775  00079C  D00C               	goto	l1106
  1776  00079E                     l1100:
  1777                           
  1778                           ; BSR set to: 15
  1779  00079E  5008               	movf	memcpy@s,w,c
  1780  0007A0  6ED9               	movwf	fsr2l,c
  1781  0007A2  6ADA               	clrf	fsr2h,c
  1782  0007A4  C006  FFE1         	movff	memcpy@d,fsr1l
  1783  0007A8  C007  FFE2         	movff	memcpy@d+1,fsr1h
  1784  0007AC  CFDF FFE7          	movff	indf2,indf1
  1785                           
  1786                           ; BSR set to: 15
  1787  0007B0  2A08               	incf	memcpy@s,f,c
  1788                           
  1789                           ; BSR set to: 15
  1790  0007B2  4A06               	infsnz	memcpy@d,f,c
  1791  0007B4  2A07               	incf	memcpy@d+1,f,c
  1792  0007B6                     l1106:
  1793                           
  1794                           ; BSR set to: 15
  1795  0007B6  0604               	decf	memcpy@n,f,c
  1796  0007B8  A0D8               	btfss	status,0,c
  1797  0007BA  0605               	decf	memcpy@n+1,f,c
  1798  0007BC  2804               	incf	memcpy@n,w,c
  1799  0007BE  E1EF               	bnz	l1100
  1800  0007C0  2805               	incf	memcpy@n+1,w,c
  1801  0007C2  E1ED               	bnz	l1100
  1802                           
  1803                           ; BSR set to: 15
  1804  0007C4  0012               	return		;funcret
  1805  0007C6                     __end_of_memcpy:
  1806                           	opt stack 0
  1807  0000                     stkptr	equ	0xFFC
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           intcon	equ	0xFF2
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           indf1	equ	0xFE7
  1816                           postdec1	equ	0xFE5
  1817                           plusw1	equ	0xFE3
  1818                           fsr1h	equ	0xFE2
  1819                           fsr1l	equ	0xFE1
  1820                           indf2	equ	0xFDF
  1821                           plusw2	equ	0xFDB
  1822                           fsr2h	equ	0xFDA
  1823                           fsr2l	equ	0xFD9
  1824                           status	equ	0xFD8
  1825                           stkptr	equ	0xFFC
  1826                           tblptru	equ	0xFF8
  1827                           tblptrh	equ	0xFF7
  1828                           tblptrl	equ	0xFF6
  1829                           tablat	equ	0xFF5
  1830                           intcon	equ	0xFF2
  1831                           postinc0	equ	0xFEE
  1832                           wreg	equ	0xFE8
  1833                           indf1	equ	0xFE7
  1834                           postdec1	equ	0xFE5
  1835                           plusw1	equ	0xFE3
  1836                           fsr1h	equ	0xFE2
  1837                           fsr1l	equ	0xFE1
  1838                           indf2	equ	0xFDF
  1839                           plusw2	equ	0xFDB
  1840                           fsr2h	equ	0xFDA
  1841                           fsr2l	equ	0xFD9
  1842                           status	equ	0xFD8
  1843                           
  1844                           	psect	rparam
  1845  0000                     stkptr	equ	0xFFC
  1846                           tblptru	equ	0xFF8
  1847                           tblptrh	equ	0xFF7
  1848                           tblptrl	equ	0xFF6
  1849                           tablat	equ	0xFF5
  1850                           intcon	equ	0xFF2
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           indf1	equ	0xFE7
  1854                           postdec1	equ	0xFE5
  1855                           plusw1	equ	0xFE3
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           indf2	equ	0xFDF
  1859                           plusw2	equ	0xFDB
  1860                           fsr2h	equ	0xFDA
  1861                           fsr2l	equ	0xFD9
  1862                           status	equ	0xFD8
  1863                           stkptr	equ	0xFFC
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           intcon	equ	0xFF2
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           indf1	equ	0xFE7
  1872                           postdec1	equ	0xFE5
  1873                           plusw1	equ	0xFE3
  1874                           fsr1h	equ	0xFE2
  1875                           fsr1l	equ	0xFE1
  1876                           indf2	equ	0xFDF
  1877                           plusw2	equ	0xFDB
  1878                           fsr2h	equ	0xFDA
  1879                           fsr2l	equ	0xFD9
  1880                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        44
    BSS         77
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      93
    BANK0           160      0      72
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    memcpy@s1	PTR const void  size(1) Largest target is 8
		 -> main@chs(COMRAM[8]), main@ch_413(COMRAM[8]), main@ch_404(COMRAM[7]), main@ch(COMRAM[7]), 
		 -> delay_boot(COMRAM[1]), CAN_rx_buf(COMRAM[8]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 8
		 -> main@chs(COMRAM[8]), main@ch_413(COMRAM[8]), main@ch_404(COMRAM[7]), main@ch(COMRAM[7]), 
		 -> delay_boot(COMRAM[1]), CAN_rx_buf(COMRAM[8]), 

    Flash_Writex@P	PTR unsigned char  size(1) Largest target is 64
		 -> main@chdata(BANK0[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 

    CanSendBuffer@ptr	PTR unsigned char  size(1) Largest target is 8
		 -> main@chs(COMRAM[8]), main@ch_413(COMRAM[8]), main@ch_404(COMRAM[7]), main@ch(COMRAM[7]), 
		 -> delay_boot(COMRAM[1]), CAN_rx_buf(COMRAM[8]), 

    pTXB0D	PTR unsigned char  size(2) Largest target is 3648
		 -> RAM(DATA[3648]), 


Critical Paths under _main in COMRAM

    _main->_CanSendBuffer
    _Erase_Whole_Flash->_Flash_Erasex
    _CanSendBuffer->_memcpy

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0    2908
                                             14 COMRAM    30    30      0
                      _CanSendBuffer
                  _Erase_Whole_Flash
                       _Flash_Writex
                           _init_CAN
 ---------------------------------------------------------------------------------
 (1) _init_CAN                                             3     3      0      89
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Flash_Writex                                         7     1      6     497
                                              0 COMRAM     7     1      6
                        _Write_Cycle
 ---------------------------------------------------------------------------------
 (1) _Erase_Whole_Flash                                    2     2      0     268
                                              7 COMRAM     2     2      0
                       _Flash_Erasex
 ---------------------------------------------------------------------------------
 (2) _Flash_Erasex                                         7     3      4     132
                                              0 COMRAM     7     3      4
                        _Write_Cycle
 ---------------------------------------------------------------------------------
 (2) _Write_Cycle                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSendBuffer                                        6     2      4    1958
                                              8 COMRAM     6     2      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _memcpy                                               8     3      5     312
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanSendBuffer
     _memcpy
   _Erase_Whole_Flash
     _Flash_Erasex
       _Write_Cycle
   _Flash_Writex
     _Write_Cycle
   _init_CAN

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      48       5       45.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      5D       1       97.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5       6        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Nov 23 21:39:21 2018

                        PL2 0598      __size_of_CanSendBuffer 0060                          PL4 05BA  
                        PL6 05C4                          PL8 0782                          l51 071C  
                        _WR 007BF9                 __CFG_BORV$3 000000                 main@cEndFlg 0043  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                         PL10 05DE                         PL12 05E8  
                       PL14 05F0                         PL16 05FA                         l113 041C  
                       l210 0700                         l195 080A                         _GIE 007F97  
              __CFG_CPB$OFF 000000                         u501 0476                __CFG_CPD$OFF 000000  
                       u621 0560                         u551 04BC        __size_of_Write_Cycle 0028  
                       u481 0444                         u580 051A                         wreg 000FE8  
                      l1100 079E                        l1106 07B6                        l1140 0748  
                      l1302 0524                        l1310 053E                        l1222 045C  
                      l1152 06B0                        l1160 06CA                        l1304 052A  
                      l1154 06B4                        l1170 06F2                        l1322 057E  
                      l1226 0468                        l1242 04A0                        l1244 04A6  
                      l1236 048E                        l1166 06DA                        l1182 0764  
                      l1326 058A                        l1238 0494                        l1168 06EA  
                      l1256 04D2                        l1188 0774                        l1286 04EC  
                      _CFGS 007BFE                        _FREE 007BFC                        _PIR5 000F77  
                      _WREN 007BFA                        _main 0404                        fsr1h 000FE2  
                      fsr2h 000FDA                        indf1 000FE7                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9                        start 0400  
             __CFG_IESO$OFF 000000               __CFG_FOSC$HS1 000000               __CFG_MCLRE$ON 000000  
              ___param_bank 000000                       ?_main 0001             _bootloader_flag 005C  
                     _CARRY 007EC0                       _EEPGD 007BFF                       _T0CON 000FD5  
                     _TMR0H 000FD7                       _TMR0L 000FD6               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000  
             _CanSendBuffer 0664                       main@i 005A                       main@j 0059  
                     main@k 0055                       _wtime 0057               main@cStartFlg 005B  
                     tablat 000FF5                       plusw1 000FE3                       plusw2 000FDB  
      __end_of_Flash_Erasex 07EE                       status 000FD8        __end_of_Flash_Writex 0782  
        Flash_Writex@length 0006             __initialization 0602               main@addrpoint 0051  
    Erase_Whole_Flash@erase 0008                __end_of_main 0598                      ??_main 000F  
             __activetblptr 000002              __CFG_PLLCFG$ON 000000              __CFG_RETEN$OFF 000000  
            ?_CanSendBuffer 0009                      _CANCON 000F6F                      _EECON1 000F7F  
                    _EECON2 000F7E             __CFG_BBSIZ$BB2K 000000                      _TABLAT 000FF5  
                    _TBLPTR 000FF6                      _RXB0D0 000F66                      _RXB0D1 000F67  
                    _RXB0D2 000F68                      _RXB0D3 000F69                      _RXB0D4 000F6A  
                    _RXB0D5 000F6B                      _RXB0D6 000F6C                      _RXB0D7 000F6D  
                    _STKPTR 000FFC              __CFG_XINST$OFF 000000                      _pTXB0D 0047  
            __CFG_STVREN$ON 000000            __end_of_init_CAN 075A                      _memcpy 0790  
                    clear_0 0648                      clear_1 0654                      main@ch 001F  
              __pdataCOMRAM 002D                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                  __accesstop 0060         Flash_Writex@address 0001  
   __end_of__initialization 065A               ___rparam_used 000001              __pcstackCOMRAM 0001  
              __pidataBANK0 083A                  __end_ofPL2 05BA                  __end_ofPL4 05C4  
                __end_ofPL6 05DE                  __end_ofPL8 0790             ??_CanSendBuffer 000D  
     __size_of_Flash_Erasex 0028                  __pbssBANK0 0060       __size_of_Flash_Writex 0028  
                _delay_boot 005D               ??_Write_Cycle 0001                     ?_memcpy 0001  
                   _CANSTAT 000F6E                     _BRGCON1 000E43                     _BRGCON2 000E44  
                   _BRGCON3 000E45                _Flash_Erasex 07C6            __CFG_CANMX$PORTC 000000  
              _Flash_Writex 075A                     _TBLPTRH 000FF7                     _TBLPTRL 000FF6  
                   _TBLPTRU 000FF8                     _RXB0DLC 000F65                     _RXB0CON 000F60  
                   _TXB0DLC 000F25                   ?_init_CAN 0001             __CFG_PWRTEN$OFF 000000  
                   __Hparam 0000                     __Lparam 0000                     __pcinit 0602  
           __size_of_memcpy 0036                     __ramtop 0F00                     __ptext0 0404  
                   __ptext1 0712                     __ptext2 075A                     __ptext3 06C4  
                   __ptext4 07C6                     __ptext5 07EE                     __ptext6 0664  
                   __ptext7 0790         __end_of_Write_Cycle 0816           __CFG_MSSPMSK$MSK7 000000  
                   main@chs 0017        end_of_initialization 065A                  ??_init_CAN 0001  
                   memcpy@d 0006                     memcpy@n 0004                     memcpy@s 0008  
             __Lmediumconst 0000                     postdec1 000FE5                     postinc0 000FEE  
                main@F14946 003C                  main@F14948 0035                  main@F14957 002D  
                main@F14959 00A0           _Erase_Whole_Flash 06C4                   _TRISCbits 000F94  
        ?_Erase_Whole_Flash 0001           __CFG_SOSCSEL$HIGH 000000                  main@ch_404 0026  
                main@ch_413 000F                  main@chdata 0060         ??_Erase_Whole_Flash 0008  
       Flash_Erasex@address 0001                 _Write_Cycle 07EE               __pidataCOMRAM 0816  
            __end_of_memcpy 07C6   __end_of_Erase_Whole_Flash 0712                 __end_ofPL10 05E8  
               __end_ofPL12 05F0                 __end_ofPL14 05FA                 __end_ofPL16 0602  
       start_initialization 0602          CanSendBuffer@tx_id 0009                 __pdataBANK0 00A0  
                  ??_memcpy 0006                 __pbssCOMRAM 0051       __end_of_CanSendBuffer 06C4  
         __size_of_init_CAN 0048  __size_of_Erase_Whole_Flash 004E                    _LATCbits 000F8B  
             Flash_Writex@P 0005               Flash_Writex@i 0007                    _PIR5bits 000F77  
                  _RXB0SIDH 000F61                    _RXB0SIDL 000F62                    _RXF0SIDH 000EE0  
                  _RXF0SIDL 000EE1                    _TXB0SIDH 000F21                    _TXB0SIDL 000F22  
                  _RXM0SIDH 000EF8                    _RXM0SIDL 000EF9                   copy_data0 0616  
                 copy_data1 0636                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000                ?_Write_Cycle 0001                  _CAN_rx_buf 0049  
                  _init_CAN 0712               __size_of_main 0194         __CFG_INTOSCSEL$HIGH 000000  
             ?_Flash_Erasex 0001                 _RXB0CONbits 000F60          __CFG_WDTEN$SWDTDIS 000000  
                _INTCONbits 000FF2               ?_Flash_Writex 0001                    memcpy@d1 0001  
                  memcpy@s1 0003            CanSendBuffer@len 000C            CanSendBuffer@ptr 000B  
               _TXB0CONbits 000F20          __CFG_WDTPS$1048576 000000              ??_Flash_Erasex 0005  
            ??_Flash_Writex 0007         __CFG_BORPWR$ZPBORMV 000000  
